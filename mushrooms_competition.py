# -*- coding: utf-8 -*-
"""Maryna_mushrooms_comp_try1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ds0nq6aaNXvgTgV4rkuGZ8QwJkXLBMtx

# Mushrooms challenge

Each autumn, in Catalonia, there is a big competition about mushroom hunting. Unfortunately, during the past years, a lot of people have picked poisonous mushrooms thinking that they were edible, causing an overload on the healthcare system.

The Department of Health has asked to develop a model that given basic image attributes of mushrooms we can detect if it is poisonous or not, and give a guidance if which are the features most indicative of a poisonous mushroom.

## 1.&nbsp;Import libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, FixedThresholdClassifier

from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score

"""## 2.&nbsp; Read in, manipulate and split data"""

# url = "https://drive.google.com/file/d/1Op1vQftBKN1lrPVGGLJU-UOlv_dScTup/view?usp=sharing"

url = "https://drive.google.com/file/d/1IXBsdVij9K801UmS5EZIFTHJyvz_flwZ/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
mush = pd.read_csv(path)

mush.head()

X = mush.drop(columns=["Id"]).copy()
y = X.pop("poisonous")

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.8, random_state=8)

X_train.head()

"""## 3.&nbsp; Create pipeline

We chose the `RandomForestClassifier()` as our model but you can try any other classifier.
"""

pipe = make_pipeline(
    OneHotEncoder(handle_unknown="infrequent_if_exist"),
    RandomForestClassifier(random_state=123)
)

from sklearn.model_selection import GridSearchCV

# define parameter grid
param_grid = {
    "randomforestclassifier__n_estimators": range(100, 701, 100),
    "randomforestclassifier__min_samples_split": range(2, 10, 2)
}

# define GridSearchCV
search = GridSearchCV(pipe,
                      param_grid,
                      cv=5,
                      verbose=1)

#search.fit(X_train, y_train)

#pipe.fit(X_train, y_train)

search.predict(X_test)

accuracy_score(y_true=y_test, y_pred=search.predict(X_test))

"""- A bit better than 95% Accuracy.
- That means, only 5 out of 100 mushrooms are wrongly labeled.
- "Wrongly labeled" can be two cases:
     - A poisonous mushroom got classified as non-poisonous or
     - a non-poisonous mushroom got classified as poisonous.

**Are both cases equally dangerous?**

With **FixedThreshholdClassifier** I tried to tuned my treshhold for poisonous mushrooms, not to receive any False Negative (no people killed).


This function computes the confusion matrix as a numerical array.
It returns a matrix showing true positives, true negatives, false positives, and false negatives.
we need to pass it true and predistion to compare: confusion_matrix(y_true, y_pred)
"""

tuned_threshold = FixedThresholdClassifier(
    search, threshold=0.1, response_method="predict_proba"
).fit(X_train, y_train)

print(confusion_matrix(y_test, tuned_threshold.predict(X_test)))

accuracy_score(y_true=y_test, y_pred=tuned_threshold.predict(X_test))

from sklearn.metrics import recall_score

recall_score(y_true=y_test, y_pred=tuned_threshold.predict(X_test))

"""With a recall score of 1, no poisonous mushroom will be classified as non-poisonous (which means there are no false-negatives) --> no person will die."""